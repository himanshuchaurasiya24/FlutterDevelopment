
update







// 1 currency_converter_projects_notes
 Types of widgets
	1. stateless -->data is immutable;
	2. stateful
	3. Inherited
	state is the data that determines behaviour of the widget;
	in an app we can only have one material app call;
	material will have home
	scafold will have body
	body will have child
	and child can be anything like text images
	you can not put const on parent widget
	constructor-> create State-> initstate-> didchange dependencies
three tree are there in flutter
	1. widget tree
	2. element tree -> has copy of widget tree and every widget creates 				its own element and is is responsible for HOT 				RELOADING
	3. render object tree
renderobject widget is of three types
	1: leafRender -> no child
	2. singleChild -> one child -> coloredBox
	3. multichild -> multi child -> Column
container has padding and margin properties
	so instead of wrapping it in padding widget we can use its padding and margin properties;
in boxDecoration widget color is to mentioned and not in its parent widget this will givw error
if color is already defined then shift it insidw the boxDecoration widget;
useMaterial : true to remove shadow of app bar;

-->	mediaquery to get the size of an screen on which it is being used;
use instead of the following
final size = mediaquery.sizeof(context) -->this will only listen to the 
device screen size and nothing else;		
final size = mediaquery.ofcontext.size;
to get the width use size.width;
var vlues can be re-assigned so make it const to use it in a widget;


------------------------------------------------------------------------------------------------------------------------------------------








to use singleChildScrollView if any expanded widget is defined wrap every expanded widget with singleChildScrollView and then wrap its parent widget with singleChildScrollView

if a column is inside of the row use expanded to fix render error the child in row takes whole row width
similarly if a row is inside of a column then use flex to fix render flow error the child in column takes whole height










new windows 
whenever there is a column inside a column use expanded to see it on screen
always dispose the controller after the widget related to it is close because it remains in memory of it untill you dispose it using overriden dispose method and calling controllerName.dispose(); in it dispose method is only available in stateful widget.

....whenever a widget is not showing on the screen wrap it with expanded because the widget may have the property to use as much space as possible; 
....use map function to cast anylist into a different types of list



-------------------------------------------------------------------------------------------
Size Preference

Column- height - as much as possible and width- as much as needed by children


That is why it is important to wrap column inside of a widget that restricts device height like wrapping it in a scaffold widget which has max device height(space after displaying the app bar) and width;


 SingleChildScrollView with bottom padding solves pixel overflow when keyboard shows up



in stateless Widget while navigating you have to pass a context which is not globally available in stateless widget so to solve this pass BuildContext Context in the method in which the navigator is called which will pass the context ;


 to enforce rounded corners in card widget use  
clipBehavior: Clip.hardEdge,
shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(30),
      ),
these properties inside of the card widget 



in willPopScope widget on WillPopUp return the following...
here pass return as false because we are doing it here by navigator but if we are saving data instead of popping like this we should return true;
a copy of this is 
onWillPop: () async {
          // here pass return as false because we are doing it here by navigator but if we are saving data instead of popping like this we should return true;
          Navigator.of(context).pop({
            Filter.glutenFree: _glutenFreeFilterSet,
            Filter.lactoseFree: _lactoseFreeFilterSet,
            Filter.vegetrian: _vegetarianFilterSet,
            Filter.vegan: _veganFilterSet,
          });
          return false;
        },


------------------------------------------------------------------------------------------------------------------------------------------
while using stateNotifier you are not allowed to edit exiting data in memory but create a new one;

in riverpod provider if we have a dynamic data we should use statenotifierprovider method and 


Tween Widget is used in implicit animation to decide the animation between a particular time 

to use image transition use hero widget as parent and pass the same tag to the other screen wrapped with hero

------------------------------------------------------------------------------------------------------------------------------------------


some other project notes down here ie



Global key allows the build method to keep the internal state when the build method is rebuild;
while working with the form only global key is something we usually require;


------------------------------------------------------------------------------------------------------------------------------------------
in flutter riverpod the 'userProvider.notifier' allows the data to change and also gives access to the methods discribed in the provider class.
where as the watch() method listens to ay data changes and rebuild the widget whenever there is any data change;


in the background image of circle avatar use fileImage not image.file because the later is a widget where as the former is an imageProvider;




Riverpod
using ref.read() --> when we want to listen to the data one time only it is recommended but it should be used outside of the build function preferably inside of  sateful eidget because it doesnot notifies to any changes and thus does not triggers rebuild
where as 
using ref.watch() --> whenever there is need to rebuild the build method we should use it inside the build method to rebuild a particular widget whenever there is any changes in the data it is recommended to be used inside of a build finction and in statelss widget;

in stateful widget use ref.read() inside of the lifecycle methods like initState() there the ref is already present due to its conversion into comsumerStatefulWidget;
ref.watch(providerName);

use stateProvider to update the value by ref.read(providerName.notifier).update((state)=>newValue);








	


